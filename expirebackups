#!/usr/bin/perl
#
# expirebackups - find old backups to be deleted
#
# Copyright (C) 2004,2006-2008,2011,2022  Christian Garbs <mitch@cgarbs.de>
# licensed under GNU GPL v2 or later
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

sub print_help {
    die "usage:\t$0 [keep_this_many] <backup_path> [extension]\n";
}

# parameter handling
print_help() unless @ARGV;

my $keep_count = 4;
$keep_count = shift @ARGV if ($ARGV[0] =~ /^\d+$/);

my $backup_path = shift @ARGV;
$backup_path =~ s:/+$::;
die "backup path `$backup_path' is no directory\n" unless -d $backup_path;

my $extension = '.tar.bz2';
if (@ARGV) {
    $extension = shift @ARGV;
    die "extension `$extension' must start with a dot\n" unless substr($extension, 0, 1) eq '.';
}

print_help if @ARGV;

# read file list
my (%backup, @keep, @delete);
opendir DIR, $backup_path or die "can't opendir() `$backup_path': $!\n";
foreach (grep { -f "$backup_path/$_" } readdir(DIR)) {
    if ( /^((.+)-(\d{4})(\d{2})(\d{2})$extension)$/ ) {
	push @{$backup{$2}}, {
	    'FILE'  => $1,
	    'NAME'  => $2,
	    'YEAR'  => $3,
	    'MONTH' => $4,
	    'DAY'   => $5,
	    'AGE'   => (($3*13)+$4)*32+$5
	}
    }
}
closedir DIR or die "can't closedir() `$backup_path': $!\n";

foreach my $file (keys %backup) {
    my @backup = @{$backup{$file}};

    # sort newest first
    @backup = sort {$b->{AGE} <=> $a->{AGE}} @backup;
    
    # keep latest 4 entries
    @keep = splice @backup, 0, $keep_count;
    
    # sort oldest first
    @backup = reverse @backup;
    
    # print file list
    print "$backup_path/$_->{FILE}\n" foreach (@backup);
}
