# Configuration file for simplebackup.

#
# This is the directory where the backup is written to.
# Be sure to have enough free disk space here.
#
TARGETDIR=/tmp/backup

#
# This is the directory where the backup is prepared.
# Disk space needed here is the sum of all data to be backed up.
# This directory will be deleted on startup, so don't point to
# anyting important.
#
WORKDIR=$TARGETDIR/tmp

#
# These paths and their subdirectories are to be backed up.
#
BACKUPDIRS='/boot/grub'
# BACKUPDIRS='/boot:/etc:/root:/var/backups:/var/games:/var/lib/amavis-stats:/var/lib/aptitude:/var/lib/cvs:/var/lib/mailman:/var/lib/news:/var/lib/ucf:/var/lib/usemod-wiki:/var/log:/var/mail:/var/spool/cron'

#BACKUPDIRS_ONEFS='/dev'

#
# This is the name of the backup.  It is later prepended
# with a timestamp.
#
NAME=$(hostname)-testrc

#
# This lockfile is used to detect another running backup.
# You can run multiple different backups in parallel by
# using different lockfiles in different configurations.
#
#LOCKFILE=/var/run/backup_in_progress-"$NAME"

#
# Nice level to run with.
# 20 is low priority, 0 is normal,
# -20 is high priority (only root can do this).
#
NICELEVEL=20

#
# These commands are executed before the backup.
# Here you can dump databases, save your partition layout etc.
#
extracommands()
{
    # system data
    echo "extracting system data"
    fdisk -l > "$WORKDIR"/output_fdisk_-l
    lspci -v > "$WORKDIR"/output_lspci_-v
    dpkg --get-selections > "$WORKDIR"/output_dpkg_--get-selections
    #dd if=/dev/sdb  of="$WORKDIR"/mbr_sdb.dd bs=512 count=1
    #dd if=/dev/sdc1 of="$WORKDIR"/bootsector_sdc1.dd bs=512 count=1

    # databases
    #echo "dumping databases"
    #(
    #    cd "$WORKDIR"
    #    /root/aniki-tools/dumpit.sh
    #    /root/forum-tools/dumpit.sh
    #    /root/mysql-tools/dumpit.sh
    #)
}

postbackup()
{
    # echo generating checksum
    # sha256sum -b "$BACKUPFILE" > "$BACKUPFILE".sha256

    # echo mailing disk space left
    # df -h "$TARGETDIR" | mail -s "backup finished" root

    # !! You might want to encrypt your backup before sending it over
    # !! untrusted networks (e.g. email or UUCP).

    # echo mailing new archive
    # mutt -e 'set record=/dev/null' -s "backup finished on $(hostname)" -a "$BACKUPFILE" -a "$BACKUPFILE".sha256-- root < /dev/null

    # echo sending new archive via UUCP
    # uucp -t -C -n someuser "$BACKUPFILE"        'somesystem!someuser'
    # uucp -t -C -n someuser "$BACKUPFILE".sha256 'somesystem!someuser'

    # echo scopying new archive
    # scp "$BACKUPFILE" "$BACKUPFILE".sha256 backupuser@somehost:/some/dir

    # expire older backups
    # keep only the 4 latest backups (4 is the default from expirebackups)
    to_expire=$(expirebackups "$TARGETDIR" ."$BACKUP_EXTENSION" | wc -l)
    if [ "$to_expire" = 0 ]; then
	echo "no older backups to expire"
    else
	echo "expiring older backups:"
	expirebackups "$TARGETDIR" ."$BACKUP_EXTENSION" | while read -r backup; do rm -v "$backup"; done
    fi

    : # empty functions don't work
}
