#!/bin/bash
#
# simplebackup - a simple backup script
#
# 2004-2008 (C) by Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL.
#

# initial setup
set -e
export PATH=/usr/sbin:/usr/bin:/sbin:/bin
RCFILE=~/.simplebackup.conf

# helper functions
echo_info() {
    if [ "$SILENT" != "1" -a \
         "$SILENT" != "true" ]; then
        echo "$@"
    fi
}

echo_warn() {
    echo "$@"
}

echo_err() {
    echo "$@" > /dev/stderr
}

# help wanted?
if [ "$1" = "-h" ]; then
    echo "usage:"
    echo -e "\t$0 [-h] [configuration_file]"
    exit 0
fi

# other configuration file given?
if [ "$1" ]; then
    RCFILE="$1"
fi

# check permissions on configuration file
if [ $(( 0$(stat -c %a "$RCFILE") & 0022 )) -gt 0 ] ; then
    echo_err Configuration file is writeable by group or others.
    echo_err As this file is executed under your userid, this is a
    echo_err security risk.  A malicious user could add a command to
    echo_err remove the contents of your home directory, for example.
    echo_err Change the permissions to something like 600 or 644.
    exit 2
fi

# set default values
extracommands() { :; }
postcopy() { :; }
postbackup() { :; }

# more initialization
source "$RCFILE"
TARGET="$NAME"-$(LANG=C date +%Y%m%d)

# check configuration
if [ -z "$TARGETDIR" ] ; then
    echo_err TARGETDIR is not set
    exit 3
else
    if [ ! -d "$TARGETDIR" ] ; then
	echo_err TARGETDIR is no directory
	exit 3
    fi
fi

if [ -z "$WORKDIR" ] ; then
    echo_err WORKDIR is not set
    exit 4
fi

if [ -z "$BACKUPDIRS" ] ; then
    echo_err BACKUPDIRS is not set
    exit 5
fi

if [ -z "$NAME" ] ; then
    echo_err NAME is not set
    exit 6
fi

if [ -z "$LOCKFILE" ] ; then
    echo_warn warning: no LOCKFILE is given, multiple instances may run
fi

if [ -z "$NICELEVEL" ] ; then
    NICELEVEL=0
fi

# init
if [ "$LOCKFILE" ] ; then
    [ -e "$LOCKFILE" ] && echo_err "another backup is already running" && exit 1
    echo $$ > "$LOCKFILE"
    trap 'STATUS=$?; rm -f "$LOCKFILE"; exit $STATUS' ERR
    trap 'echo_err "Received SIGTERM"; rm -f "$LOCKFILE"; exit 98' SIGTERM
    trap 'echo_err "Received SIGINT"; rm -f "$LOCKFILE"; exit 99' SIGINT
fi
renice $NICELEVEL $$ > /dev/null

# prepare temporary directory
echo_info "setting up"
rm -rf "$WORKDIR"
mkdir -m 700 -p "$WORKDIR"
chown $UID "$WORKDIR"

# execute extra commands
(
    extracommands
)

# display chroot
if [ "$CHROOT" ]; then
    echo_info "chroot to $CHROOT"
    if [ ! -d "$CHROOT" ]; then
	echo_err "chroot path not found!"
	exit 3
    fi
fi

# backup files
OLDIFS="$IFS"
IFS=":"
for DIR in $BACKUPDIRS; do
    if [ -d "$CHROOT$DIR" ]; then
	echo_info "backing up $DIR"
	mkdir -p "$WORKDIR$DIR"
	(cd "$CHROOT$DIR" ; tar -c .) | (cd "$WORKDIR$DIR" ; tar -x)
    else
	echo_err "$DIR is no directory!"
    fi
done
IFS="$OLDIFS"

# execute extra commands after copying
(
    postcopy
)

# build big archive
echo_info "renaming working directory"
cd "$TARGETDIR"
rm -rf "$TARGETDIR/$TARGET"
mv "$WORKDIR" "$TARGET"

echo_info "building archive"
BACKUPFILE="$TARGET.tar.bz2"
(
    umask 0377
    tar -cjf "$BACKUPFILE" "$TARGET"
)
rm -rf "$TARGET"

# execute postbackup commands
export BACKUPFILE
(
    postbackup
)

echo_info "finished"
[ "$LOCKFILE" ] && rm "$LOCKFILE"
exit 0
