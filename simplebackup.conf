# Configuration file for simplebackup.

#
# If true, print only errors and warnings.
#
SILENT=false

# If true, print statistics for every directory backed up.
# Needs find(1), du(1) and wc(1).
DIRSTATS=false

#
# This is the directory where the backup is written to.
# Be sure to have enough free disk space here.
#
TARGETDIR=/backup

#
# This is the directory where the backup is prepared.
# Disk space needed here is the sum of all data to be backed up.
# This directory will be deleted on startup, so don't point to
# anyting important.
#
WORKDIR=$TARGETDIR/tmp

#
# These paths and their subdirectories are to be backed up.
# File system boundaries will be crossed.
# Use : to separate multiple paths.
#
BACKUPDIRS='/boot:/etc:/root:/var/backups:/var/games:/var/lib/amavis-stats:/var/lib/aptitude:/var/lib/cvs:/var/lib/cyrus:/var/lib/dpkg:/var/lib/mailman:/var/lib/news:/var/lib/ucf:/var/lib/usemod-wiki:/var/log:/var/mail:/var/spool/cron:/var/spool/cyrus:/var/spool/uptimed:/lib/firmware:/usr/local/lib/firmware:/usr/lib/hotplug/firmware:/var/lib/apt'

#
# These paths and their subdirectories are to be backed up.
# Processing of subdirectories will not cross file system boundaries.
# Use : to separate multiple paths.
#
BACKUPDIRS_ONEFS=''

#
# This is the name of the backup.  It is later prepended
# with a timestamp.
#
NAME=$(hostname)

#
# This lockfile is used to detect another running backup.
# You can run multiple different backups in parallel by
# using different lockfiles in different configurations.
#
LOCKFILE=/var/run/backup_in_progress-"$NAME"

#
# Nice level to run with.
# 20 is low priority, 0 is normal,
# -20 is high priority (only root can do this).
#
NICELEVEL=20

#
# Chroot path.
# If you want to backup another system that is reachable via
# your file system, you have to point this variable to the other
# system's root directory.  Leave empty for normal operation.
#
CHROOT=

#
# These commands are executed before the backup.
# Here you can dump databases, save your partition layout etc.
# extracommand() is executed before entering a possible $CHROOT.
#
extracommands()
{
    # when using CHROOT, commands need to be changed, e.g.:
    # chroot "$CHROOT" dpkg --get-selections > "$WORKDIR"/output_dpkg_--get-selections
    # instead of just  dpkg --get-selections > "$WORKDIR"/output_dpkg_--get-selections

    ### system data
    echo "extracting system data"
    fdisk -l > "$WORKDIR"/output_fdisk_-l
    lspci -v > "$WORKDIR"/output_lspci_-v
    dpkg --get-selections "*" > "$WORKDIR"/output_dpkg_--get-selections

    ### boot sectors and MBR
    # echo "boot sectors and MBR"
    # for DEV in /dev/hd? /dev/sd?; do
    #     I=${DEV##*/}
    #     [ -b ${DEV}  ] && dd if=${DEV}  of="$WORKDIR"/mbr.dd.dev_${I}     bs=512 count=1 status=noxfer || true
    #     [ -b ${DEV}1 ] && dd if=${DEV}1 of="$WORKDIR"/bootsector_${I}1.dd bs=512 count=1 status=noxfer || true
    # done
    # for DEV in /dev/md*; do
    #     I=${DEV##*/}
    #     [ -b ${DEV}  ] && dd if=${DEV}  of="$WORKDIR"/mbr.dd.dev_${I}     bs=512 count=1 status=noxfer || true
    # done

    ### e2fs backup superblock positions
    # echo "e2fs superblocks"
    # (set +e; fdisk -l | egrep '^(/|Disk )' | sed -e 's/^Disk //' -e 's/:* .*//' | grep -v identifier \
    # | while read DEV; do \
    #     echo ext2 superblock dump on $DEV: ;\
    #     dumpe2fs "$DEV" | grep Backup ;\
    # done; true ) > "$WORKDIR"/backup_superblocks.txt 2>/dev/null

    ### LVM configuration backup
    # echo "LVM backup"
    # vgcfgbackup -f "$WORKDIR"/vg-%s-cfgbackup
    # vgs > "$WORKDIR"/output_vgs
    # pvs > "$WORKDIR"/output_pvs
    # lvs > "$WORKDIR"/output_lvs

    ### databases
    # echo "dumping databases"
    # for DB in bugzilla mysql mediawikidb serendipity; do
    #     echo -n dumping database $DB...
    #     mysqldump --defaults-file=/etc/mysql/debian.cnf --databases $DB | bzip2 > "$WORKDIR"/mysql.$DB.dump.bz2
    #     echo ok
    # done

    ### RAID configuration backup
    # echo "RAID backup"
    # mdadm -Evvs > "$WORKDIR"/mdadm_-Evvs 2>/dev/null || true

    ### smartctl backup (harddisk serial numbers)
    # echo "smartctl backup"
    # for DEV in /dev/hd? /dev/sd?; do
    #     [ -e $DEV ] && smartctl -i $DEV > "$WORKDIR"/smartctl_-i_${DEV##*/}
    # done

    : # empty functions don't work
}

#
# These commands are executed after copying all files into the
# $WORKDIR, but before putting them into the backup archive.
# postcopy() is executed outside a possible $CHROOT.
#
postcopy()
{
    # Apache logs get too big and nobody reads them anyway,
    # so don't include them all in the backup:
    #
    # echo removing older apache logfiles
    # rm "$WORKDIR"/var/log/apache/*.log.??.gz

    # apt lists take up quite some space and can be
    # recreated via apt-update, so they should be excluded
    #   
    # echo removing apt package lists
    # rm -r "$WORKDIR"/var/lib/apt/lists

    : # empty functions don't work
}

#
# These commands are executed after the backup.
# The new backup filename is available as $BACKUPFILE.
#
postbackup()
{
    # echo generating checksum
    # sha256sum -b "$BACKUPFILE" > "$BACKUPFILE".sha256

    # echo mailing disk space left 
    # df -h "$TARGETDIR" | mail -s "backup finished" root

    # !! You might want to encrypt your backup before sending it over
    # !! untrusted networks (e.g. email or UUCP).

    # echo mailing new archive
    # mutt -e 'set record=/dev/null' -s "backup finished on $(hostname)" -a "$BACKUPFILE" -a "$BACKUPFILE".sha256-- root < /dev/null

    # echo sending new archive via UUCP
    # uucp -t -C -n someuser "$BACKUPFILE"        'somesystem!someuser'
    # uucp -t -C -n someuser "$BACKUPFILE".sha256 'somesystem!someuser'

    # echo scopying new archive
    # scp "$BACKUPFILE" "$BACKUPFILE".sha256 backupuser@somehost:/some/dir

    : # empty functions don't work
}
